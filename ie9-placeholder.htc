<PUBLIC:ATTACH EVENT="oninput"  ONEVENT="onchange()" />
<PUBLIC:ATTACH EVENT="onkeyup"  ONEVENT="onchange()" />
<PUBLIC:ATTACH EVENT="onblur"  ONEVENT="onchange()" />
<PUBLIC:ATTACH EVENT="onfocus"  ONEVENT="onchange()" />
<PUBLIC:ATTACH EVENT="onclick"  ONEVENT="onchange()" />
<PUBLIC:ATTACH EVENT="onpropertychange"  ONEVENT="onpropertychange()" />
<PUBLIC:ATTACH EVENT="oncontentready" ONEVENT="oncontentready()" />
<SCRIPT LANGUAGE="JScript">
var placeholderEl,placeholderInnerEl;
function oncontentready(){
        init();
        propertyready();
}
function init(){
    if(element.hasAttribute("placeholder")&&!placeholderEl){
        placeholderEl = document.createElement("span");
        placeholderEl.setAttribute("class","-ie9-placeholder");

        placeholderEl.attachEvent("onclick",function(){
            element.focus();
        });
        insertAfter(placeholderEl,element);

        placeholderInnerEl = document.createElement("span");
        placeholderInnerEl.setAttribute("class","-ie9-placeholder-inner");

        placeholderEl.appendChild(placeholderInnerEl);
    }
}
function onchange(){
    if(placeholderEl){
        placeholderEl.style.display = element.value?"none":"inline";
    }
}
function propertyready(){
    if(placeholderEl){
        var moveLength = getMoveLength();
        placeholderEl.style.left = moveLength.left;
        placeholderEl.style.top = moveLength.top;
        placeholderEl.style.display = element.value||isHidden()?"none":"inline";
        var placeholderStr = element.getAttribute("placeholder");
        placeholderInnerEl.setAttribute("placeholder",placeholderStr||"");
        placeholderInnerEl.style.maxWidth = moveLength.maxWidth;
    }
}
function onpropertychange(){
    //var propertyName = event.propertyName;
    //其实可以通过propertyName来获取到具体的改变属性
    //然后来根据具体属性来决定是否重新计算布局
    //但属性太多了，而对于每个元素改变属性也不是特别频繁，
    //所以我就不写了。
    //if(['className','style','style.width',...].indexOf(propertyName)!=-1){
    //  ...
    //}
    if (event.srcElement == element){ 
        oncontentready();
    }
}
function insertAfter(newElement,targetElement) {
    var parent = targetElement.parentNode;
    if(parent.lastChild == targetElement) {
        parent.appendChild(newElement);
    } else {
        parent.insertBefore(newElement,targetElement.nextSibling);
    }
}
function getMoveLength(){
  var clientHeight = element.clientHeight;
  var computedStyle = window.getComputedStyle(element,null);
  var offsetWidth = element.offsetWidth;
  
  var marginRightWidth = computedStyle.getPropertyValue("margin-right");
  var paddingTopWidth = computedStyle.getPropertyValue("padding-top");
  var paddingRightWidth = computedStyle.getPropertyValue("padding-right");
  var paddingBottomWidth = computedStyle.getPropertyValue("padding-bottom");
  var paddingLeftWidth = computedStyle.getPropertyValue("padding-left");
  var borderLeftWidth = computedStyle.getPropertyValue("border-left-width");  
  var left =toNumber(offsetWidth)+
            toNumber(marginRightWidth)-
            toNumber(paddingLeftWidth)-
            toNumber(borderLeftWidth);
  var top = 0;
  if(element.nodeName=="TEXTAREA"){
      var rows = element.rows;
      top = (toNumber(clientHeight)-
            toNumber(paddingTopWidth)-
            toNumber(paddingBottomWidth)
            )*(rows-1)/rows;
  } 
  var maxWidth = toNumber(element.clientWidth) - 
                 toNumber(paddingLeftWidth) - 
                 toNumber(paddingRightWidth);                      
  return {left:-left+"px",top:-top+"px",maxWidth:maxWidth+"px"};
}
function isHidden(){
    var computedStyle = window.getComputedStyle(element,null);
    var display = computedStyle.getPropertyValue("display");
    var visibility = computedStyle.getPropertyValue("visibility");
    return display=="none"||visibility=="hidden";
}
function toNumber(numberStr){
  return parseFloat(numberStr)||0;
}
</SCRIPT>